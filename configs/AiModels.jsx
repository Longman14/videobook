const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  

   export const GenerateCourseLayout_AI = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate a course tutorial with the following details: Course Name, Description, Along with chapter name, about, duration, Category: 'Programming', Topic: 'Introduction to JavaScript', Level: Basic, Duration: 1 hour, Chapters: 5, in Json format\n "},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"courseName\": \"JavaScript Fundamentals: A Beginner's Guide\",\n  \"description\": \"This course provides a gentle introduction to JavaScript programming, covering the core concepts and syntax necessary to start building interactive web pages. No prior programming experience is required. Learn through hands-on examples and practice exercises.\",\n   \"category\": \"Programming\",\n  \"topic\": \"Introduction to JavaScript\",\n  \"level\": \"Basic\",\n  \"duration\": \"1 hour\",\n  \"chapters\": [\n    {\n      \"chapterName\": \"Chapter 1: Setting the Stage - What is JavaScript?\",\n      \"about\": \"This chapter introduces the concept of JavaScript, its purpose, and its role in web development. We'll explore where JavaScript code lives and how it interacts with HTML and CSS.\",\n      \"duration\": \"10 minutes\"\n    },\n    {\n      \"chapterName\": \"Chapter 2: Getting Started - Basic Syntax and Structure\",\n      \"about\": \"Here, we'll dive into the basic syntax of JavaScript, learning about variables, data types (numbers, strings, booleans), and how to write simple code statements.\",\n      \"duration\": \"15 minutes\"\n    },\n       {\n      \"chapterName\": \"Chapter 3: Controlling the Flow - Operators and Conditional Statements\",\n       \"about\":\"In this chapter, you'll understand arithmetic, comparison and logical operators and learn how to control the flow of your program with 'if' statements and conditional logic.\",\n       \"duration\": \"15 minutes\"\n    },\n    {\n      \"chapterName\": \"Chapter 4:  Repeating Actions - Loops\",\n      \"about\": \"This chapter teaches you how to repeat tasks using loops like 'for' and 'while', making your JavaScript code more efficient and powerful.\",\n      \"duration\": \"15 minutes\"\n    },\n    {\n      \"chapterName\": \"Chapter 5: Your First Interaction - Introduction to the DOM\",\n      \"about\": \"We will take a look at how JavaScript manipulates HTML elements, introducing the concept of the Document Object Model (DOM) and simple event handling. This chapter is about bringing your static web pages to life!\",\n       \"duration\": \"5 minutes\"\n    }\n  ]\n}\n```\n"},
          ],
        },
      ],
    });


    
    export const GenerateCourseContent_AI = model.startChat({
        generationConfig,
        history: [
          {
            role: "user",
            parts: [
              {text: "Explain the concept in detail on Topic: Next.js Deep Dive: From Fundamentals to Production, Chapter: Chapter 1: Introduction to Next.js in JSON format with list of array with field as title, explanation on given chapter in detail, Code example (code field <precode> format) if applicable\n"},
            ],
          },
          {
            role: "model",
            parts: [
              {text: "```json\n{\n  \"chapterTitle\": \"Chapter 1: Introduction to Next.js\",\n  \"sections\": [\n    {\n      \"title\": \"What is Next.js?\",\n      \"explanation\": \"Next.js is a React framework for building performant and scalable web applications. It provides a structured and opinionated way to build server-rendered, statically generated, and client-side rendered React applications. Next.js simplifies complex tasks like routing, data fetching, optimization, and deployment, allowing developers to focus on building the application's features.\",\n      \"subSections\": [\n        {\n          \"title\": \"Key Features\",\n          \"explanation\": \"Next.js offers several compelling features that make it a popular choice for modern web development:\",\n          \"features\": [\n            \"**Server-Side Rendering (SSR):** Renders React components on the server, improving SEO, initial load time, and overall performance. The HTML is sent to the browser, allowing search engines to crawl and index the content effectively.\",\n            \"**Static Site Generation (SSG):** Generates static HTML pages at build time. Ideal for content-heavy websites and blogs.  Faster than SSR as pages are pre-rendered and served from a CDN.\",\n            \"**Automatic Code Splitting:** Splits the application code into smaller chunks, loading only the necessary JavaScript for each route. Improves initial load time by reducing the amount of JavaScript the browser needs to download and parse.\",\n            \"**File-Based Routing:**  Defines routes based on the directory structure in the `pages` directory.  Easy to understand and maintain.\",\n            \"**Built-in CSS and Sass Support:** Supports styling with CSS Modules, Sass, and other popular styling solutions.\",\n            \"**API Routes:** Enables building serverless functions directly within the Next.js application. Ideal for handling backend logic and connecting to databases.\",\n            \"**Image Optimization:** Optimizes images for different devices and screen sizes, improving performance and user experience.  Built-in component `next/image` handles resizing, format conversion, and lazy loading.\",\n            \"**Fast Refresh:** Provides near-instant feedback on code changes during development, improving developer productivity.\",\n            \"**Typescript Support:** Native support for TypeScript, enabling type checking and improving code maintainability.\",\n            \"**SEO Optimization:** Built-in support for SEO best practices, including customizable meta tags and sitemaps.\",\n            \"**Easy Deployment:** Can be easily deployed to platforms like Vercel, Netlify, AWS, and more.\"\n          ]\n        }\n      ]\n    },\n    {\n      \"title\": \"Why Use Next.js?\",\n      \"explanation\": \"Next.js solves common challenges in React development and provides a smoother developer experience. Choosing Next.js can lead to:\",\n      \"reasons\": [\n        \"**Improved Performance:** SSR and SSG capabilities significantly improve website performance, especially for initial load time and SEO.\",\n        \"**Better SEO:** Server-rendered content is easily crawlable by search engines, leading to better search engine rankings.\",\n        \"**Simplified Development:** Next.js provides a structured and opinionated approach, simplifying development workflows and reducing boilerplate code.\",\n        \"**Enhanced User Experience:** Faster load times and improved interactivity contribute to a better user experience.\",\n        \"**Increased Productivity:** Features like Fast Refresh and built-in tooling streamline the development process and boost productivity.\",\n        \"**Scalability:**  Next.js applications can be scaled easily to handle growing traffic and complexity.\"\n      ]\n    },\n    {\n      \"title\": \"Getting Started with Next.js\",\n      \"explanation\": \"Setting up a Next.js project is straightforward using the `create-next-app` CLI tool.\",\n      \"steps\": [\n        \"**Prerequisites:** Ensure you have Node.js and npm (or yarn) installed on your system.\",\n        \"**Create a New Project:** Run the following command in your terminal to create a new Next.js project:\",\n        \"```bash\\nnpx create-next-app my-nextjs-app\\ncd my-nextjs-app\\n```\",\n        \"Or, using yarn:\",\n        \"```bash\\nyarn create next-app my-nextjs-app\\ncd my-nextjs-app\\n```\",\n        \"**Start the Development Server:** Run the following command to start the development server:\",\n        \"```bash\\nnpm run dev\\n# or\\nyarn dev\\n```\",\n        \"**Open Your Browser:** Open your browser and navigate to `http://localhost:3000` to see the default Next.js welcome page.\"\n      ],\n      \"codeExample\": {\n        \"title\": \"Creating a Next.js app\",\n        \"code\": \"<pre><code>npx create-next-app my-nextjs-app\\ncd my-nextjs-app\\nnpm run dev\\n# or\\nyarn create next-app my-nextjs-app\\ncd my-nextjs-app\\nyarn dev</code></pre>\"\n      }\n    },\n    {\n      \"title\": \"The `pages` Directory\",\n      \"explanation\": \"The `pages` directory is a fundamental concept in Next.js. Every file in the `pages` directory automatically becomes a route based on its filename.\",\n      \"examples\": [\n        \"**`pages/index.js`:** Represents the root route `/` (the homepage).\",\n        \"**`pages/about.js`:** Represents the `/about` route.\",\n        \"**`pages/blog/index.js`:** Represents the `/blog` route.\",\n        \"**`pages/blog/[id].js`:** Represents a dynamic route for blog posts, where `[id]` is a parameter (e.g., `/blog/123`).  Square brackets denote dynamic route segments.\"\n      ],\n      \"codeExample\": {\n        \"title\": \"Example `pages/about.js`\",\n        \"code\": \"<pre><code>function About() {\\n  return (\\n    &lt;div&gt;\\n      &lt;h1&gt;About Us&lt;/h1&gt;\\n      &lt;p&gt;This is the about page.&lt;/p&gt;\\n    &lt;/div&gt;\\n  );\\n}\\n\\nexport default About;</code></pre>\"\n      }\n    },\n    {\n      \"title\": \"Understanding Rendering Strategies\",\n      \"explanation\": \"Next.js offers different rendering strategies to optimize performance and SEO:\",\n      \"strategies\": [\n        {\n          \"title\": \"Server-Side Rendering (SSR)\",\n          \"explanation\": \"React components are rendered on the server for each request.  This ensures that the browser receives fully rendered HTML, improving SEO and initial load time. Use `getServerSideProps` function to fetch data on server side.\",\n          \"useCases\": [\n            \"Dynamic content that changes frequently\",\n            \"Content that requires authentication\",\n            \"Content that needs to be indexed by search engines.\"\n          ],\n          \"codeExample\": {\n              \"title\": \"Example SSR using `getServerSideProps`\",\n              \"code\": \"<pre><code>function MyPage({ data }) {\\n  return (&lt;div&gt;{data}&lt;/div&gt;);\\n}\\n\\nexport async function getServerSideProps(context) {\\n  const data = await fetchData(); // Your data fetching logic here\\n  return {\\n    props: { data }, // Will be passed to the page component as props\\n  };\\n}\\n\\nexport default MyPage;</code></pre>\"\n          }\n\n        },\n        {\n          \"title\": \"Static Site Generation (SSG)\",\n          \"explanation\": \"React components are rendered at build time.  The generated HTML is served from a CDN, resulting in extremely fast load times. Use `getStaticProps` and `getStaticPaths` (for dynamic routes) to fetch data at build time.\",\n          \"useCases\": [\n            \"Content that doesn't change frequently (e.g., blog posts, documentation)\",\n            \"Marketing websites\",\n            \"E-commerce product pages (if content is relatively static).\"\n          ],\n          \"codeExample\": {\n            \"title\": \"Example SSG using `getStaticProps` and `getStaticPaths` (for dynamic routes)\",\n            \"code\": \"<pre><code>// pages/blog/[id].js\\n\\nfunction BlogPost({ post }) {\\n  return (&lt;div&gt;&lt;h1&gt;{post.title}&lt;/h1&gt;&lt;p&gt;{post.content}&lt;/p&gt;&lt;/div&gt;);\\n}\\n\\nexport async function getStaticPaths() {\\n  // Fetch a list of possible values for id\\n  const paths = await fetchAllBlogPostIds(); // Replace with your data fetching\\n  return {\\n    paths, // An array of objects, where each object has a `params` key with an `id` property\\n    fallback: false, // false: any paths not returned by getStaticPaths will result in a 404 page.\\n                     // 'blocking': The path will be server-rendered on demand if it's not available at build time.\\n                     // true: The user will be shown a fallback page while the page is being generated.\\n  };\\n}\\n\\nexport async function getStaticProps({ params }) {\\n  // Fetch necessary data for the blog post using params.id\\n  const post = await fetchBlogPost(params.id); // Replace with your data fetching\\n  return {\\n    props: { post },\\n  };\\n}\\n\\nexport default BlogPost;</code></pre>\"\n          }\n        },\n        {\n          \"title\": \"Client-Side Rendering (CSR)\",\n          \"explanation\": \"The initial HTML is minimal, and React components are rendered in the browser after the JavaScript is loaded. Suitable for highly interactive applications where SEO is not a primary concern. Typically, Next.js encourages SSR/SSG whenever possible, but CSR can be used where necessary.\",\n          \"useCases\": [\n            \"Interactive dashboards\",\n            \"Single-page applications (SPAs)\",\n            \"Content that is highly personalized and requires significant client-side logic.\"\n          ],\n          \"codeExample\": {\n            \"title\": \"Example CSR\",\n            \"code\": \"<pre><code>import { useState, useEffect } from 'react';\\n\\nfunction MyComponent() {\\n  const [data, setData] = useState(null);\\n\\n  useEffect(() => {\\n    async function fetchData() {\\n      const response = await fetch('/api/data'); // Fetch data from an API route\\n      const jsonData = await response.json();\\n      setData(jsonData);\\n    }\\n    fetchData();\\n  }, []);\\n\\n  if (!data) {\\n    return &lt;div&gt;Loading...&lt;/div&gt;;\\n  }\\n\\n  return &lt;div&gt;{data.message}&lt;/div&gt;;\\n}\\n\\nexport default MyComponent;</code></pre>\"\n          }\n        }\n      ]\n    },\n     {\n      \"title\": \"API Routes\",\n      \"explanation\": \"Next.js allows you to create API endpoints directly within your application using the `pages/api` directory. These are serverless functions that can handle HTTP requests.\",\n      \"example\": {\n        \"title\": \"Example `pages/api/hello.js`\",\n        \"code\": \"<pre><code>export default function handler(req, res) {\\n  res.status(200).json({ text: 'Hello' });\\n}\\n</code></pre>\"\n      },\n      \"usage\": \"To access this API route, you would make a request to `/api/hello`.\"\n    }\n  ]\n}\n```"},
            ],
          },
        ],
      });
    

    
    
    // run();
  
    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());

